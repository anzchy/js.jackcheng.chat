# JavaScript to Python Learning Module - Cursor Rules

## Module Overview
This module focuses on learning the language transition from JavaScript to Python, helping developers quickly master Python programming through comparative teaching.

## Core Principles

### 1. JavaScript Perspective Teaching
- Always start from the thinking habits of JavaScript developers
- Use JavaScript concepts to explain Python features
- Emphasize the syntax differences and conceptual mapping between the two languages
- Avoid direct translation, focus on understanding the differences in design philosophy

### 2. Python Best Practices
- Follow the PEP 8 code style guide
- Use Pythonic idioms
- Emphasize readability and conciseness
- Introduce best practices from the Python community

### 3. Comparative Learning Strategy
- Provide a comparison between JavaScript and Python for each concept
- Use editor components to display runnable code examples
- Explain the design philosophy behind syntax differences
- Provide a comparison of performance characteristics and usage scenarios

## Code Example Specifications

### Editor Component Usage
```mdx
<PythonEditor title="Example Title" compare={true}>
```javascript !! js
// JavaScript code
console.log("Hello World");
```

```python !! py
# Python code
print("Hello World")
```
</PythonEditor>
```

### Code Comment Requirements
- Use `//` for comments in JavaScript code
- Use `#` for comments in Python code
- Add detailed English explanations
- Highlight syntax differences and conceptual mapping

### Comparative Example Structure
1.  **Concept Introduction** - Explain from a JavaScript perspective
2.  **Syntax Comparison** - Show implementations in both languages side-by-side
3.  **Difference Explanation** - Explain syntax differences and design philosophy
4.  **Usage Scenarios** - Explain when to use which language feature
5.  **Performance Analysis** - Compare the performance characteristics of the two implementations

## Content Organization Rules

### Each learning module should include:
1.  **Concept Introduction** - Start with JavaScript concepts
2.  **Python Syntax** - Show the corresponding Python implementation
3.  **Comparative Analysis** - Explain the differences and reasons in detail
4.  **Practical Application** - Provide real-world usage scenarios
5.  **Exercises** - Reinforce learning content
6.  **Best Practices** - Python-specific coding standards

### Key Concept Comparison
- **Variable Declaration**: `let/const` vs. direct assignment
- **Function Definition**: `function` vs. `def`
- **Class Definition**: `class` vs. `class`
- **Asynchronous Programming**: Promise vs. async/await
- **Module System**: ES6 modules vs. Python modules
- **Error Handling**: try-catch vs. try-except

## AI Assistant Behavior Guidelines

### Response Style
- Use English for responses
- Explain Python concepts from a JavaScript perspective
- Provide specific code comparison examples
- Recommend using editor components
- Focus on Python's performance characteristics

### Code Generation
- Generate Python code that conforms to the PEP 8 standard
- Provide the corresponding JavaScript implementation
- Include complete error handling
- Add detailed English comments
- Wrap code in editor components
- Consider Python performance optimizations

### Problem Solving
- Prioritize the thinking habits of JavaScript developers
- Provide multiple Python solutions
- Explain the reasons for choosing a specific solution
- Consider Python's performance characteristics
- Use the editor to verify code
- Analyze Python-specific performance bottlenecks

## Special Instructions

### When the user asks about a Python concept:
1.  First, explain the corresponding JavaScript concept
2.  Show the Python syntax and usage
3.  Provide a comparative example (using the editor component)
4.  Explain usage scenarios and precautions
5.  Analyze Python's performance characteristics

### When the user needs a code example:
1.  Wrap the code in an editor component
2.  Provide complete, runnable code
3.  Include a comparative implementation of JavaScript and Python
4.  Add detailed English comments
5.  Explain how the code works
6.  Provide Python performance optimization suggestions

### When the user encounters a problem:
1.  Analyze the root cause of the problem
2.  Provide multiple Python solutions
3.  Explain the pros and cons of each solution
4.  Recommend Python best practices
5.  Verify the solution in the editor
6.  Consider Python-specific performance impacts

## Quality Assurance

### Code Quality
- All Python code must comply with the PEP 8 standard
- Verify with static analysis tools
- Include appropriate test cases
- Follow Python best practices
- Test execution in the editor
- Performance monitoring and optimization

### Document Quality
- Content is accurate
- Example code is complete and runnable
- Links and references are correct
- Formatting is standardized and consistent
- Interactive code examples are usable
- Multilingual content is synchronized

### User Experience
- Clear learning path
- Easy-to-understand example code
- Appropriate difficulty for exercises
- Provide sufficient context
- Fast response from the code editor
- Performance optimization experience

## Module-Specific Specifications

### Python-Specific Concepts
- **List Comprehensions**: Compare with JavaScript's map/filter
- **Decorators**: Compare with JavaScript's higher-order functions
- **Context Managers**: Compare with JavaScript's try-finally
- **Generators**: Compare with JavaScript's iterators
- **Type Annotations**: Compare with TypeScript's type system

### Performance Optimization Focus
- **Memory Management**: Reference counting vs. garbage collection
- **Execution Model**: Bytecode vs. JIT compilation
- **Concurrency Programming**: GIL limitations vs. event loop
- **Data Processing**: NumPy/Pandas vs. JavaScript arrays

### Ecosystem Comparison
- **Package Management**: pip vs. npm
- **Virtual Environments**: venv vs. node_modules
- **Build Tools**: setuptools vs. webpack
- **Testing Frameworks**: pytest vs. Jest

---

Remember: The core goal of this module is to help JavaScript developers quickly master Python. Therefore, all explanations and examples should be from a JavaScript perspective, and fully utilize editor components to provide an interactive learning experience. At the same time, pay attention to Python-specific best practices and performance characteristics.